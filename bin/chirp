#!/usr/bin/env node

/**
 * Module dependencies
 */

var chirp = require('../')
  , program = require('commander')
  , http = require('http')
  , util = chirp.util
  , puts = util.puts
  , error = util.error


/**
 * Program meta
 */

program.version(require('../package').version)


/**
 * Commands holder
 */

var commands = {};


(commands.start = program.command('start'))
    .option('-p, --port [port]', "port for the web server to listen on")
    .action(start.bind(commands.start))

program.parse(process.argv)


/**
 * Program commands
 */

function start () {
  var server = chirp.createServer()
    , httpServer = http.createServer(server)
    , stream = chirp.stream({server: httpServer, path: '/stream'})
    , linkStream = chirp.stream({server: httpServer, path: '/links'})
    , userStream = chirp.stream({server: httpServer, path: '/users'})
    , db = chirp.db(__dirname + '/../db/chirp.db')
    , links = db.array('links')
    , users = db.array('users')
    , port = this.port || 4000

  server.use(chirp.session());

  stream.on('data', function (d) {
    var msg = JSON.parse(d);
    puts("message:", msg);

    users.indexOf(msg.owner, function (err, index) {
      if (err) return stream.emit('error', err);
      if (null === index) {
        users.push(msg.owner, function (err) {
          if (err) return stream.emit('error');
          var ret = JSON.stringify({user: msg.owner})
          userStream.stash(ret);
          userStream.send(ret);
        });
      }
    });

    if (msg.links.length > 0) {
      var tmp = msg.links.slice();

      ~function next () {
        var link = tmp.shift()
        if (link) {
          links.indexOf(link, function (err, index) {
            if (err) return stream.emit('error', err);
            else if (null === index) {
              links.push(link, function (err) {
                if (err) return stream.emit('error', err);
                var ret = JSON.stringify({link: link});
                linkStream.stash(ret);
                linkStream.send(ret);
                next();
              });
            } else {
              next();
            }
          });
        } else {
          stream.stash(d);
          stream.send(d);
        }
      }();
    } else {
      stream.stash(d);
      stream.send(d);
    }
  });

  httpServer.listen(port);
  puts("server listening on", port);
}
